{"version":3,"sources":["containers/Room/index.js"],"names":["Room","state","video","screen","onChangeScreen","e","target","value","_this","setState","socketClient","onListenPeer","emitNewPeerGetStream","this","props","room","currentRoom","onPeerLeftMyRoom","roomList","filter","r","id","_this$state","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","window","location","href","includes","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","to","onClick","stopStream","emitLeftRoom","antd__WEBPACK_IMPORTED_MODULE_10__","hostStopStream","onChange","type","name","checked","hostGetStream","shareStream","className","autoPlay","host","peers","length","map","c","key","Component","connect","user","dispatch","verify","verifyAction"],"mappings":"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","file":"static/js/2.c5d62fb7.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {verifyAction} from '../../actions/user';\r\nimport socketClient from '../../utils/socketClient';\r\nimport {Button} from 'antd';\r\nimport {\r\n    hostGetStream, \r\n    stopStream,\r\n    shareStream,\r\n    hostStopStream\r\n} from '../../utils/stream';\r\nimport './Room.css';\r\nclass Room extends Component {\r\n    state = {\r\n        video: true,\r\n        screen: false\r\n    }\r\n    componentDidMount() {\r\n        socketClient.onListenPeer();\r\n        socketClient.emitNewPeerGetStream(this.props.room.currentRoom);\r\n        socketClient.onPeerLeftMyRoom();\r\n    }\r\n    onChangeScreen = (e) => {\r\n        switch(e.target.value) {\r\n            case 'video':\r\n                this.setState({\r\n                    video: true,\r\n                    screen: false\r\n                })\r\n                break;\r\n            case 'screen':\r\n                this.setState({\r\n                    video: false,\r\n                    screen: true\r\n                })\r\n                break;\r\n            case 'both':\r\n                this.setState({\r\n                    video: true,\r\n                    screen: true\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    video: false,\r\n                    screen: false\r\n                })\r\n        }\r\n    }\r\n    render() {\r\n        const {room} = this.props;\r\n        const currentRoom = (room.roomList.filter(r => r.id == room.currentRoom))[0] || null;\r\n        const {video, screen} = this.state;\r\n        return(\r\n            <React.Fragment>\r\n                <div>ROOM</div>\r\n                <div>\r\n                {!window.location.href.includes(\"/host\") &&\r\n                <Link to=\"/home\" \r\n                    onClick={() => {\r\n                        stopStream()\r\n                        socketClient.emitLeftRoom(currentRoom.id, null);\r\n                    }}\r\n                >\r\n                <Button>Back to Home</Button>\r\n                </Link>}\r\n                {window.location.href.includes(\"/host\") &&\r\n                <React.Fragment>\r\n                <Link to=\"/home\" \r\n                    onClick={() => {\r\n                        stopStream()\r\n                        hostStopStream(currentRoom.id)\r\n                        socketClient.emitLeftRoom(currentRoom.id, null);\r\n                    }}\r\n                >\r\n                <Button>Back to Home</Button>\r\n                </Link>\r\n                <form>\r\n                    <input onChange={this.onChangeScreen} \r\n                        type=\"radio\" name=\"getScreen\" value=\"video\" \r\n                        checked={video == true && screen == false}/> Video\r\n                    <input onChange={this.onChangeScreen} \r\n                        type=\"radio\" name=\"getScreen\" value=\"screen\"\r\n                        checked={video == false && screen == true}/> Screen\r\n                    <input onChange={this.onChangeScreen} \r\n                        type=\"radio\" name=\"getScreen\" value=\"both\"\r\n                        checked={video == true && screen == true}/> Both\r\n                    <Button \r\n                        onClick={() => hostGetStream(video, screen)}\r\n                    >Get Stream</Button>\r\n                    <Button\r\n                        onClick={() => shareStream(currentRoom.id)}\r\n                    >Share to all users</Button>\r\n                    <Button\r\n                        onClick={() => {\r\n                            stopStream();\r\n                            hostStopStream(currentRoom.id);\r\n                        }}\r\n                    >Stop Stream\r\n                    </Button>\r\n                </form>\r\n                </React.Fragment>}\r\n                </div>\r\n                <div className=\"my-video\">\r\n                    <video id=\"myVideo\" className=\"subScreen\" autoPlay></video>\r\n                    <video id=\"myScreen\" className=\"fullScreen\" autoPlay></video>\r\n                </div>\r\n                <ul>\r\n                    <li><b>{currentRoom != null ? currentRoom.host.name : ''}</b></li>\r\n                    {currentRoom != null && currentRoom.peers.length > 0 && currentRoom.peers.map(c => (\r\n                        <li key={c.id}>{c.name}</li>\r\n                    ))}\r\n                </ul>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        room: state.room\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        verify: () => {\r\n            dispatch(verifyAction())\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Room);"],"sourceRoot":""}